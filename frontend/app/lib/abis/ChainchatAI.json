{
  "address": "0x53129F6296b2378381e89F1aB8506d3617AA3eC2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "bio",
          "type": "string"
        }
      ],
      "name": "BioUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "commenter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CommentAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "coverCID",
          "type": "string"
        }
      ],
      "name": "CoverImageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "postsDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commentsDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        }
      ],
      "name": "EngagementRewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "contentCID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "imageCID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PostCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        }
      ],
      "name": "PostLiked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sharer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "originalPostId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPostId",
          "type": "uint256"
        }
      ],
      "name": "PostShared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "imageCID",
          "type": "string"
        }
      ],
      "name": "ProfileImageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "feedPointerCID",
          "type": "string"
        }
      ],
      "name": "UserFeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "modelCID",
          "type": "string"
        }
      ],
      "name": "UserModelUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "username",
          "type": "string"
        }
      ],
      "name": "UserRegistered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CLAIM_COOLDOWN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FREE_POST_ALLOWANCE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_content",
          "type": "string"
        }
      ],
      "name": "addComment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ccToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimWeeklyEngagementRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commentCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_contentCID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_imageCID",
          "type": "string"
        }
      ],
      "name": "createPost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newUsername",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_newProfileImageCID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_newBio",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_newCoverImageCID",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_newInterests",
          "type": "string[]"
        }
      ],
      "name": "editProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "freePostsRemaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_commentId",
          "type": "uint256"
        }
      ],
      "name": "getComment",
      "outputs": [
        {
          "internalType": "address",
          "name": "commenter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getFreePostsRemaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        }
      ],
      "name": "getPost",
      "outputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentCID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "imageCID",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "likes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commentsCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "originalPostId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPostsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getUserByAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "username",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isRegistered",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "profileImage",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "bio",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "coverPhoto",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "interests",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "feedPointer",
              "type": "string"
            }
          ],
          "internalType": "struct ChainchatAI.User",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserFeed",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserInterests",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserModel",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "posts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "likesGiven",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "comments",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "interests",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastClaimedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastClaimedCommentCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastClaimedPostCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastClaimedShareCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        }
      ],
      "name": "likePost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxWeeklyPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "postComments",
      "outputs": [
        {
          "internalType": "address",
          "name": "commenter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "postCommentsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "posts",
      "outputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentCID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "imageCID",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "likes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commentsCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "originalPostId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referralCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referrers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_username",
          "type": "string"
        }
      ],
      "name": "registerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerComment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerPost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_bio",
          "type": "string"
        }
      ],
      "name": "setBio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postCost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_commentCost",
          "type": "uint256"
        }
      ],
      "name": "setCosts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_coverCID",
          "type": "string"
        }
      ],
      "name": "setCoverPhoto",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardPerPost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPerComment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxWeeklyPayout",
          "type": "uint256"
        }
      ],
      "name": "setEngagementRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_imageCID",
          "type": "string"
        }
      ],
      "name": "setProfileImage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "setTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_interests",
          "type": "string[]"
        }
      ],
      "name": "setUserInterests",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        }
      ],
      "name": "sharePost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signupBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_feedPointerCID",
          "type": "string"
        }
      ],
      "name": "updateUserFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "modelCID",
          "type": "string"
        }
      ],
      "name": "updateUserModel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userCommentCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userFeedModels",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userInterests",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userLikeCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userPostCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userShareCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "profileImage",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "bio",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "coverPhoto",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "feedPointer",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "walletToCreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x87d20112454e1093fef0045e5c3d26c4f033e992cd08a4bee988c1f0279fdf13",
  "receipt": {
    "to": null,
    "from": "0x03b5AD7cD8EFeaC72d50444ae53ebA424CEBCEab",
    "contractAddress": "0x53129F6296b2378381e89F1aB8506d3617AA3eC2",
    "transactionIndex": 17,
    "gasUsed": "3602461",
    "logsBloom": "0x
    "blockHash": "0xc93b5e3ffa1cfd55ff255ad9399565a18fa9786c2837ee7c31cc0d0d0e169c3c",
    "transactionHash": "0x87d20112454e1093fef0045e5c3d26c4f033e992cd08a4bee988c1f0279fdf13",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 5844097,
        "transactionHash": "0x87d20112454e1093fef0045e5c3d26c4f033e992cd08a4bee988c1f0279fdf13",
        "address": "0x53129F6296b2378381e89F1aB8506d3617AA3eC2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000003b5ad7cd8efeac72d50444ae53eba424cebceab"
        ],
        "data": "0x",
        "logIndex": 56,
        "blockHash": "0xc93b5e3ffa1cfd55ff255ad9399565a18fa9786c2837ee7c31cc0d0d0e169c3c"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 5844097,
        "transactionHash": "0x87d20112454e1093fef0045e5c3d26c4f033e992cd08a4bee988c1f0279fdf13",
        "address": "0x53129F6296b2378381e89F1aB8506d3617AA3eC2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000003b5ad7cd8efeac72d50444ae53eba424cebceab",
          "0x00000000000000000000000003b5ad7cd8efeac72d50444ae53eba424cebceab"
        ],
        "data": "0x",
        "logIndex": 57,
        "blockHash": "0xc93b5e3ffa1cfd55ff255ad9399565a18fa9786c2837ee7c31cc0d0d0e169c3c"
      }
    ],
    "blockNumber": 5844097,
    "cumulativeGasUsed": "6509290",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBa78c4cA2D5050E6cF52047F4469CD8B96A5C5b4"
  ],
  "numDeployments": 1,
  "solcInputHash": "e527f180035aeef76e4821f882d56e24",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"bio\",\"type\":\"string\"}],\"name\":\"BioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"commenter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CommentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"coverCID\",\"type\":\"string\"}],\"name\":\"CoverImageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"postsDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commentsDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"EngagementRewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contentCID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"imageCID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PostCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"}],\"name\":\"PostLiked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sharer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalPostId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPostId\",\"type\":\"uint256\"}],\"name\":\"PostShared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"imageCID\",\"type\":\"string\"}],\"name\":\"ProfileImageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"feedPointerCID\",\"type\":\"string\"}],\"name\":\"UserFeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"modelCID\",\"type\":\"string\"}],\"name\":\"UserModelUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_COOLDOWN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FREE_POST_ALLOWANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"}],\"name\":\"addComment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ccToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimWeeklyEngagementRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commentCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contentCID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_imageCID\",\"type\":\"string\"}],\"name\":\"createPost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newUsername\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_newProfileImageCID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_newBio\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_newCoverImageCID\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_newInterests\",\"type\":\"string[]\"}],\"name\":\"editProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freePostsRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commentId\",\"type\":\"uint256\"}],\"name\":\"getComment\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"commenter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getFreePostsRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"getPost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentCID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageCID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"likes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commentsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalPostId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPostsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"profileImage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bio\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"coverPhoto\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"interests\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"feedPointer\",\"type\":\"string\"}],\"internalType\":\"struct ChainchatAI.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserFeed\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInterests\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserModel\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"posts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"likesGiven\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"comments\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"interests\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimedCommentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimedPostCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimedShareCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"likePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWeeklyPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"postComments\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"commenter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"postCommentsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"posts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentCID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageCID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"likes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commentsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalPostId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerComment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerPost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_bio\",\"type\":\"string\"}],\"name\":\"setBio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commentCost\",\"type\":\"uint256\"}],\"name\":\"setCosts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_coverCID\",\"type\":\"string\"}],\"name\":\"setCoverPhoto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerPost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerComment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxWeeklyPayout\",\"type\":\"uint256\"}],\"name\":\"setEngagementRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_imageCID\",\"type\":\"string\"}],\"name\":\"setProfileImage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_interests\",\"type\":\"string[]\"}],\"name\":\"setUserInterests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"sharePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signupBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_feedPointerCID\",\"type\":\"string\"}],\"name\":\"updateUserFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"modelCID\",\"type\":\"string\"}],\"name\":\"updateUserModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCommentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userFeedModels\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInterests\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLikeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPostCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userShareCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"profileImage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bio\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"coverPhoto\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feedPointer\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletToCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimWeeklyEngagementRewards()\":{\"notice\":\"Claim weekly engagement rewards based on newly accumulated activity since last claim.         Rewards are computed on deltas: posts, comments, shares.         One claim per 7 days; payout is capped by maxWeeklyPayout.\"},\"getUserFeed(address)\":{\"notice\":\"View user\\u2019s feed pointer (CID)\"},\"getUserModel(address)\":{\"notice\":\"View user\\u2019s model/embedding CID\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ChainchatAI.sol\":\"ChainchatAI\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"contracts/ChainchatAI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract ChainchatAI is ReentrancyGuard, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public ccToken;\\n\\n    // ---------- Core Types ----------\\n\\n    struct User {\\n        string username;\\n        address userAddress; // canonical user address (creator)\\n        address sender; // original EAO/msg.sender used at registration\\n        bool isRegistered;\\n        string profileImage; // CID\\n        string bio;\\n        string coverPhoto; // CID\\n        string[] interests;\\n        string feedPointer; // CID to user feed profile JSON\\n    }\\n\\n    struct Post {\\n        address author;\\n        string contentCID; // OG Storage/IPFS CID\\n        string imageCID; // OG Storage/IPFS CID (optional)\\n        uint256 timestamp;\\n        uint256 likes;\\n        uint256 commentsCount;\\n        uint256 originalPostId; // 0 if original; otherwise source post id\\n        mapping(address => bool) likedBy; // like set\\n    }\\n\\n    struct Comment {\\n        address commenter;\\n        string content; // Consider CID in future if comments are large\\n        uint256 timestamp;\\n    }\\n\\n    // ---------- Econ Settings ----------\\n\\n    uint256 public postCost = 10 * 10 ** 18;\\n    uint256 public commentCost = 5 * 10 ** 18;\\n    uint256 public signupBonus = 100 * 10 ** 18;\\n    uint256 public referralBonus = 50 * 10 ** 18; // (currently unused in functions below)\\n\\n    // Engagement rewards (per unit)\\n    uint256 public rewardPerPost = 2 * 10 ** 18;\\n    uint256 public rewardPerComment = 1 * 10 ** 18;\\n    uint256 public rewardPerShare = 1 * 10 ** 18;\\n\\n    // Max payout per week to prevent abuse\\n    uint256 public maxWeeklyPayout = 200 * 10 ** 18;\\n\\n    // One claim allowed per 7 days\\n    uint256 public constant CLAIM_COOLDOWN = 7 days;\\n\\n    // ---------- State ----------\\n\\n    string[] public interests; // global interests catalog (optional)\\n\\n    mapping(address => User) public users;\\n    mapping(address => address) public walletToCreator; // EAO -> creator (canonical)\\n    mapping(address => uint256) public freePostsRemaining;\\n    mapping(address => address) public referrers;\\n    mapping(address => uint256) public referralCount;\\n\\n    mapping(uint256 => mapping(uint256 => Comment)) public postComments;\\n    mapping(uint256 => uint256) public postCommentsCount; // postId => count\\n\\n    mapping(address => string[]) public userInterests;\\n\\n    // AI pointers\\n    mapping(address => string) public userFeedModels; // model/embedding CID\\n\\n    // User stats\\n    mapping(address => uint256) public userPostCount;\\n    mapping(address => uint256) public userLikeCount; // likes GIVEN\\n    mapping(address => uint256) public userCommentCount;\\n    mapping(address => uint256) public userShareCount;\\n\\n    // Engagement reward accounting\\n    mapping(address => uint256) public lastClaimedAt;\\n    mapping(address => uint256) public lastClaimedPostCount;\\n    mapping(address => uint256) public lastClaimedCommentCount;\\n    mapping(address => uint256) public lastClaimedShareCount;\\n\\n    Post[] public posts;\\n\\n    // ---------- Constants ----------\\n\\n    uint256 public constant FREE_POST_ALLOWANCE = 10;\\n\\n    // ---------- Events ----------\\n\\n    event UserRegistered(address indexed userAddress, string username);\\n    event ProfileImageUpdated(address indexed userAddress, string imageCID);\\n    event BioUpdated(address indexed userAddress, string bio);\\n    event CoverImageUpdated(address indexed userAddress, string coverCID);\\n\\n    event PostCreated(\\n        address indexed author,\\n        string contentCID,\\n        string imageCID,\\n        uint256 timestamp\\n    );\\n    event PostShared(\\n        address indexed sharer,\\n        uint256 originalPostId,\\n        uint256 newPostId\\n    );\\n    event PostLiked(address indexed liker, uint256 indexed postId);\\n\\n    event CommentAdded(\\n        address indexed commenter,\\n        uint256 indexed postId,\\n        string content,\\n        uint256 timestamp\\n    );\\n\\n    event UserFeedUpdated(address indexed user, string feedPointerCID);\\n    event UserModelUpdated(address indexed user, string modelCID);\\n\\n    event EngagementRewardsClaimed(\\n        address indexed user,\\n        uint256 postsDelta,\\n        uint256 commentsDelta,\\n        uint256 sharesDelta,\\n        uint256 payout\\n    );\\n\\n    // ---------- Modifiers ----------\\n\\n    modifier onlyRegisteredUser() {\\n        require(\\n            users[_getUserAddress()].isRegistered,\\n            \\\"User is not registered\\\"\\n        );\\n        _;\\n    }\\n\\n    // ---------- Constructor ----------\\n\\n    constructor(address _tokenAddress) Ownable(msg.sender) {\\n        ccToken = IERC20(_tokenAddress);\\n        transferOwnership(msg.sender);\\n    }\\n\\n    // ---------- Registration & Profile ----------\\n\\n    function registerUser(address creator, string memory _username) external {\\n        require(!users[creator].isRegistered, \\\"User is already registered\\\");\\n        require(bytes(_username).length > 0, \\\"Username required\\\");\\n\\n        users[creator] = User({\\n            username: _username,\\n            userAddress: creator,\\n            sender: msg.sender,\\n            isRegistered: true,\\n            profileImage: \\\"\\\",\\n            bio: \\\"\\\",\\n            coverPhoto: \\\"\\\",\\n            interests: new string[](0),\\n            feedPointer: \\\"\\\"\\n        });\\n\\n        walletToCreator[msg.sender] = creator;\\n        freePostsRemaining[msg.sender] = FREE_POST_ALLOWANCE;\\n\\n        if (signupBonus > 0) {\\n            ccToken.safeTransfer(msg.sender, signupBonus);\\n        }\\n\\n        emit UserRegistered(creator, _username);\\n    }\\n\\n    function setProfileImage(\\n        string memory _imageCID\\n    ) external onlyRegisteredUser {\\n        address user = _getUserAddress();\\n        users[user].profileImage = _imageCID;\\n        emit ProfileImageUpdated(user, _imageCID);\\n    }\\n\\n    function setBio(string memory _bio) external onlyRegisteredUser {\\n        address user = _getUserAddress();\\n        users[user].bio = _bio;\\n        emit BioUpdated(user, _bio);\\n    }\\n\\n    function setCoverPhoto(\\n        string memory _coverCID\\n    ) external onlyRegisteredUser {\\n        address user = _getUserAddress();\\n        users[user].coverPhoto = _coverCID;\\n        emit CoverImageUpdated(user, _coverCID);\\n    }\\n\\n    function editProfile(\\n        string memory _newUsername,\\n        string memory _newProfileImageCID,\\n        string memory _newBio,\\n        string memory _newCoverImageCID,\\n        string[] memory _newInterests\\n    ) external onlyRegisteredUser {\\n        address creator = walletToCreator[msg.sender];\\n        require(bytes(_newUsername).length > 0, \\\"Username cannot be empty\\\");\\n\\n        User storage user = users[creator];\\n        user.username = _newUsername;\\n        user.profileImage = _newProfileImageCID;\\n        user.bio = _newBio;\\n        user.coverPhoto = _newCoverImageCID;\\n        user.interests = _newInterests;\\n\\n        emit ProfileImageUpdated(creator, _newProfileImageCID);\\n        emit BioUpdated(creator, _newBio);\\n        emit CoverImageUpdated(creator, _newCoverImageCID);\\n    }\\n\\n    // ---------- AI Pointers ----------\\n\\n    function updateUserFeed(string memory _feedPointerCID) external {\\n        address user = _getUserAddress();\\n        require(users[user].isRegistered, \\\"Not registered\\\");\\n\\n        users[user].feedPointer = _feedPointerCID;\\n        emit UserFeedUpdated(user, _feedPointerCID);\\n    }\\n\\n    function updateUserModel(string memory modelCID) external {\\n        address user = _getUserAddress();\\n        require(users[user].isRegistered, \\\"Not registered\\\");\\n\\n        userFeedModels[user] = modelCID;\\n        emit UserModelUpdated(user, modelCID);\\n    }\\n\\n    // ---------- Posting / Sharing / Liking / Commenting ----------\\n\\n    function createPost(\\n        string memory _contentCID,\\n        string memory _imageCID\\n    ) external onlyRegisteredUser {\\n        address user = _getUserAddress();\\n\\n        if (freePostsRemaining[msg.sender] > 0) {\\n            freePostsRemaining[msg.sender]--;\\n        } else {\\n            if (postCost > 0) {\\n                ccToken.safeTransferFrom(msg.sender, address(this), postCost);\\n            }\\n        }\\n\\n        require(bytes(_contentCID).length > 0, \\\"contentCID required\\\");\\n\\n        Post storage newPost = posts.push();\\n        newPost.author = user;\\n        newPost.contentCID = _contentCID;\\n        newPost.imageCID = _imageCID;\\n        newPost.timestamp = block.timestamp;\\n        newPost.originalPostId = 0;\\n\\n        userPostCount[user]++;\\n\\n        emit PostCreated(user, _contentCID, _imageCID, block.timestamp);\\n    }\\n\\n    function sharePost(uint256 _postId) external onlyRegisteredUser {\\n        require(_postId < posts.length, \\\"Original post does not exist\\\");\\n        address user = _getUserAddress();\\n\\n        Post storage source = posts[_postId];\\n\\n        Post storage sharedPost = posts.push();\\n        sharedPost.author = user;\\n        sharedPost.contentCID = source.contentCID;\\n        sharedPost.imageCID = source.imageCID;\\n        sharedPost.timestamp = block.timestamp;\\n        sharedPost.originalPostId = _postId;\\n\\n        userShareCount[user]++;\\n\\n        emit PostShared(user, _postId, posts.length - 1);\\n    }\\n\\n    function likePost(\\n        uint256 _postId\\n    ) external onlyRegisteredUser nonReentrant {\\n        require(_postId < posts.length, \\\"Post does not exist\\\");\\n        address user = _getUserAddress();\\n\\n        Post storage post = posts[_postId];\\n        require(!post.likedBy[user], \\\"Already liked\\\");\\n\\n        post.likedBy[user] = true;\\n        post.likes++;\\n        userLikeCount[user]++;\\n\\n        // Reward author per like (fixed 1 token)\\n        if (address(ccToken) != address(0)) {\\n            ccToken.safeTransfer(post.author, 1 * 10 ** 18);\\n        }\\n\\n        emit PostLiked(user, _postId);\\n    }\\n\\n    function addComment(\\n        uint256 _postId,\\n        string memory _content\\n    ) external onlyRegisteredUser nonReentrant {\\n        require(_postId < posts.length, \\\"Post does not exist\\\");\\n        require(bytes(_content).length > 0, \\\"Comment cannot be empty\\\");\\n        address user = _getUserAddress();\\n\\n        // Optional paid comments (currently disabled in your original)\\n        if (commentCost > 0) {\\n            ccToken.safeTransferFrom(msg.sender, address(this), commentCost);\\n        }\\n\\n        uint256 commentId = postCommentsCount[_postId];\\n        postComments[_postId][commentId] = Comment({\\n            commenter: user,\\n            content: _content,\\n            timestamp: block.timestamp\\n        });\\n\\n        postCommentsCount[_postId]++;\\n        posts[_postId].commentsCount++;\\n        userCommentCount[user]++;\\n\\n        emit CommentAdded(user, _postId, _content, block.timestamp);\\n    }\\n\\n    // ---------- Engagement Rewards ----------\\n\\n    /**\\n     * @notice Claim weekly engagement rewards based on newly accumulated activity since last claim.\\n     *         Rewards are computed on deltas: posts, comments, shares.\\n     *         One claim per 7 days; payout is capped by maxWeeklyPayout.\\n     */\\n    function claimWeeklyEngagementRewards()\\n        external\\n        nonReentrant\\n        onlyRegisteredUser\\n    {\\n        address user = _getUserAddress();\\n\\n        // Cooldown check\\n        uint256 lastClaim = lastClaimedAt[user];\\n        require(\\n            lastClaim == 0 || block.timestamp >= lastClaim + CLAIM_COOLDOWN,\\n            \\\"Claim cooldown: once per 7 days\\\"\\n        );\\n\\n        // Deltas since last claim\\n        uint256 postsDelta = userPostCount[user] - lastClaimedPostCount[user];\\n        uint256 commentsDelta = userCommentCount[user] -\\n            lastClaimedCommentCount[user];\\n        uint256 sharesDelta = userShareCount[user] -\\n            lastClaimedShareCount[user];\\n\\n        require(\\n            postsDelta + commentsDelta + sharesDelta > 0,\\n            \\\"No new activity to claim\\\"\\n        );\\n\\n        // Compute payout\\n        uint256 payout = postsDelta *\\n            rewardPerPost +\\n            commentsDelta *\\n            rewardPerComment +\\n            sharesDelta *\\n            rewardPerShare;\\n\\n        // Cap payout\\n        if (payout > maxWeeklyPayout) {\\n            payout = maxWeeklyPayout;\\n        }\\n\\n        // Effects\\n        lastClaimedAt[user] = block.timestamp;\\n        lastClaimedPostCount[user] = userPostCount[user];\\n        lastClaimedCommentCount[user] = userCommentCount[user];\\n        lastClaimedShareCount[user] = userShareCount[user];\\n\\n        // Interactions\\n        ccToken.safeTransfer(user, payout);\\n\\n        emit EngagementRewardsClaimed(\\n            user,\\n            postsDelta,\\n            commentsDelta,\\n            sharesDelta,\\n            payout\\n        );\\n    }\\n\\n    // ---------- Views ----------\\n\\n    function getUserByAddress(\\n        address _userAddress\\n    ) external view returns (User memory) {\\n        require(users[_userAddress].isRegistered, \\\"User not found\\\");\\n        return users[_userAddress];\\n    }\\n\\n    function getPostsCount() external view returns (uint256) {\\n        return posts.length;\\n    }\\n\\n    function getPost(\\n        uint256 _postId\\n    )\\n        external\\n        view\\n        returns (\\n            address author,\\n            string memory contentCID,\\n            string memory imageCID,\\n            uint256 timestamp,\\n            uint256 likes,\\n            uint256 commentsCount,\\n            uint256 originalPostId\\n        )\\n    {\\n        require(_postId < posts.length, \\\"Post does not exist\\\");\\n        Post storage post = posts[_postId];\\n        return (\\n            post.author,\\n            post.contentCID,\\n            post.imageCID,\\n            post.timestamp,\\n            post.likes,\\n            post.commentsCount,\\n            post.originalPostId\\n        );\\n    }\\n\\n    function getComment(\\n        uint256 _postId,\\n        uint256 _commentId\\n    )\\n        external\\n        view\\n        returns (address commenter, string memory content, uint256 timestamp)\\n    {\\n        require(_postId < posts.length, \\\"Post does not exist\\\");\\n        require(\\n            _commentId < postCommentsCount[_postId],\\n            \\\"Comment does not exist\\\"\\n        );\\n\\n        Comment memory comment_ = postComments[_postId][_commentId];\\n        return (comment_.commenter, comment_.content, comment_.timestamp);\\n    }\\n\\n    function getFreePostsRemaining(\\n        address _user\\n    ) external view returns (uint256) {\\n        return freePostsRemaining[_user];\\n    }\\n\\n    function getUserStats(\\n        address user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 posts,\\n            uint256 likesGiven,\\n            uint256 comments,\\n            uint256 shares\\n        )\\n    {\\n        return (\\n            userPostCount[user],\\n            userLikeCount[user],\\n            userCommentCount[user],\\n            userShareCount[user]\\n        );\\n    }\\n\\n    /// @notice View user\\u2019s feed pointer (CID)\\n    function getUserFeed(address user) external view returns (string memory) {\\n        return users[user].feedPointer;\\n    }\\n\\n    /// @notice View user\\u2019s model/embedding CID\\n    function getUserModel(address user) external view returns (string memory) {\\n        return userFeedModels[user];\\n    }\\n\\n    // ---------- Admin ----------\\n\\n    function setTokenAddress(address _tokenAddress) external onlyOwner {\\n        ccToken = IERC20(_tokenAddress);\\n    }\\n\\n    function setCosts(\\n        uint256 _postCost,\\n        uint256 _commentCost\\n    ) external onlyOwner {\\n        postCost = _postCost;\\n        commentCost = _commentCost;\\n    }\\n\\n    function setEngagementRewards(\\n        uint256 _rewardPerPost,\\n        uint256 _rewardPerComment,\\n        uint256 _rewardPerShare,\\n        uint256 _maxWeeklyPayout\\n    ) external onlyOwner {\\n        rewardPerPost = _rewardPerPost;\\n        rewardPerComment = _rewardPerComment;\\n        rewardPerShare = _rewardPerShare;\\n        maxWeeklyPayout = _maxWeeklyPayout;\\n    }\\n\\n    function withdrawTokens() external onlyOwner {\\n        ccToken.safeTransfer(owner(), ccToken.balanceOf(address(this)));\\n    }\\n\\n    // ---------- Interests ----------\\n\\n    function setUserInterests(\\n        string[] memory _interests\\n    ) external onlyRegisteredUser {\\n        address user = _getUserAddress();\\n\\n        delete userInterests[user];\\n        for (uint256 i = 0; i < _interests.length; i++) {\\n            userInterests[user].push(_interests[i]);\\n        }\\n    }\\n\\n    function getUserInterests(\\n        address _user\\n    ) external view returns (string[] memory) {\\n        return userInterests[_user];\\n    }\\n\\n    // ---------- Internals ----------\\n\\n    // Resolve canonical user address (creator) for the caller\\n    function _getUserAddress() internal view returns (address) {\\n        address creator = walletToCreator[msg.sender];\\n        return creator != address(0) ? creator : msg.sender;\\n    }\\n}\\n\",\"keccak256\":\"0xc87ec9c0b45436d6e6065e9a72c35a6aea72c96e5f168b0b8d0a9d99dae71f49\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052678ac7230489e80000600355674563918244f4000060045568056bc75e2d631000006005556802b5e3af16b1880000600655671bc16d674ec80000600755670de0b6b3a7640000600855670de0b6b3a7640000600955680ad78ebc5ac6200000600a5534801562000073575f80fd5b5060405162003d8038038062003d808339810160408190526200009691620001bf565b60015f553380620000c157604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b620000cc81620000fa565b50600280546001600160a01b0319166001600160a01b038316179055620000f3336200014b565b50620001ee565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b620001556200018e565b6001600160a01b0381166200018057604051631e4fbdf760e01b81525f6004820152602401620000b8565b6200018b81620000fa565b50565b6001546001600160a01b03163314620001bd5760405163118cdaa760e01b8152336004820152602401620000b8565b565b5f60208284031215620001d0575f80fd5b81516001600160a01b0381168114620001e7575f80fd5b9392505050565b613b8480620001fc5f395ff3fe608060405234801561000f575f80fd5b5060043610610388575f3560e01c806367cb52d8116101df578063b83bebe411610109578063df7969ad116100a9578063f5d7632011610079578063f5d76320146108bc578063f70d205c146108cf578063fa325cef146108e2578063fb7e06d8146108eb575f80fd5b8063df7969ad1461086f578063e58863441461088e578063f2fde38b146108a1578063f5c43e38146108b4575f80fd5b8063ce7842f5116100e4578063ce7842f514610815578063d82d72bf1461081e578063db5899071461083d578063db74559b14610850575f80fd5b8063b83bebe4146107c4578063c8bee1df146107d7578063cba3f1e6146107f6575f80fd5b8063836248821161017f578063a87430ba1161014f578063a87430ba1461076e578063aa097f1514610795578063aa7e5683146107a8578063acb31585146107bb575f80fd5b806383624882146107255780638d8f2adb1461072d5780638da5cb5b14610735578063a2720f3514610746575f80fd5b806370cc4bb7116101ba57806370cc4bb7146106d7578063715018a6146106ea578063725009d3146106f25780637d8494bc14610705575f80fd5b806367cb52d8146106a557806369c212f6146106ae5780636aa72383146106ce575f80fd5b806337c909ec116102c0578063488927531161026057806356a062271161023057806356a06227146106355780635c7995b41461065457806360cd13ea146106675780636454f77514610686575f80fd5b806348892753146105575780634a3b68cc146105795780634e43603a146105b95780635193c94c14610622575f80fd5b806340731c241161029b57806340731c241461050957806340943d3d1461051c578063446a2ec81461053b57806347607a6914610544575f80fd5b806337c909ec146104d9578063392338f5146104e357806339bc4eb8146104f6575f80fd5b806326a40c991161032b5780632c7a0a72116103065780632c7a0a72146104975780632df5867a146104aa5780632e4a28ca146104b35780632e5a6370146104c6575f80fd5b806326a40c991461045d57806326a4e8d21461047c5780632b7d172d1461048f575f80fd5b80630c86a5cb116103665780630c86a5cb146103ee5780630ea126f91461040357806323c4f9631461041657806324161e761461043e575f80fd5b806304f7f9131461038c57806308e421cd146103a85780630b1e7f83146103c8575b5f80fd5b61039560075481565b6040519081526020015b60405180910390f35b6103bb6103b6366004613105565b6108fe565b60405161039f9190613168565b6103db6103d636600461317a565b6109a7565b60405161039f9796959493929190613191565b6104016103fc366004613338565b610b09565b005b610401610411366004613372565b610bf8565b610395610424366004613105565b6001600160a01b03165f908152600e602052604090205490565b61039561044c366004613105565b601a6020525f908152604090205481565b61039561046b366004613105565b60196020525f908152604090205481565b61040161048a366004613105565b610edb565b610401610f05565b6104016104a53660046133bd565b6111e9565b610395600a5481565b6103bb6104c13660046133ef565b6112b5565b6103bb6104d4366004613105565b611366565b61039562093a8081565b6104016104f1366004613417565b61138f565b6104016105043660046133bd565b611599565b6103db61051736600461317a565b611650565b61039561052a366004613105565b60166020525f908152604090205481565b61039560095481565b61040161055236600461346d565b6117fe565b61056a61056536600461349c565b61181a565b60405161039f939291906134bc565b6105a1610587366004613105565b600f6020525f90815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161039f565b6106026105c7366004613105565b6001600160a01b03165f9081526015602090815260408083205460168352818420546017845282852054601890945291909320549293909290565b60408051948552602085019390935291830152606082015260800161039f565b61056a61063036600461349c565b611982565b610395610643366004613105565b601b6020525f908152604090205481565b6002546105a1906001600160a01b031681565b610395610675366004613105565b60156020525f908152604090205481565b610395610694366004613105565b60186020525f908152604090205481565b61039560055481565b6106c16106bc366004613105565b611a3f565b60405161039f9190613547565b61039560045481565b6104016106e5366004613640565b611f05565b6104016120ed565b61040161070036600461317a565b6120fe565b610718610713366004613105565b6122d7565b60405161039f9190613709565b601d54610395565b6104016123c1565b6001546001600160a01b03166105a1565b6105a1610754366004613105565b600d6020525f90815260409020546001600160a01b031681565b61078161077c366004613105565b61245b565b60405161039f98979695949392919061371b565b6103bb6107a336600461317a565b61274d565b6104016107b63660046137ac565b612774565b61039560035481565b6103bb6107d2366004613105565b6129b6565b6103956107e5366004613105565b60176020525f908152604090205481565b610395610804366004613105565b601c6020525f908152604090205481565b61039560065481565b61039561082c36600461317a565b60126020525f908152604090205481565b61040161084b36600461349c565b6129ce565b61039561085e366004613105565b60106020525f908152604090205481565b61039561087d366004613105565b600e6020525f908152604090205481565b61040161089c3660046133bd565b6129e1565b6104016108af366004613105565b612aaa565b610395600a81565b6104016108ca36600461317a565b612ae4565b6104016108dd3660046133bd565b612cd0565b61039560085481565b6104016108f93660046133bd565b612d87565b6001600160a01b0381165f908152601460205260409020805460609190610924906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054610950906137da565b801561099b5780601f106109725761010080835404028352916020019161099b565b820191905f5260205f20905b81548152906001019060200180831161097e57829003601f168201915b50505050509050919050565b601d81815481106109b6575f80fd5b5f918252602090912060089091020180546001820180546001600160a01b039092169350906109e4906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054610a10906137da565b8015610a5b5780601f10610a3257610100808354040283529160200191610a5b565b820191905f5260205f20905b815481529060010190602001808311610a3e57829003601f168201915b505050505090806002018054610a70906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9c906137da565b8015610ae75780601f10610abe57610100808354040283529160200191610ae7565b820191905f5260205f20905b815481529060010190602001808311610aca57829003601f168201915b5050505050908060030154908060040154908060050154908060060154905087565b600c5f610b14612e3e565b6001600160a01b0316815260208101919091526040015f2060020154600160a01b900460ff16610b5f5760405162461bcd60e51b8152600401610b5690613812565b60405180910390fd5b5f610b68612e3e565b6001600160a01b0381165f908152601360205260408120919250610b8c9190613019565b5f5b8251811015610bf3576001600160a01b0382165f9081526013602052604090208351849083908110610bc257610bc2613842565b60209081029190910181015182546001810184555f938452919092200190610bea90826138a1565b50600101610b8e565b505050565b6001600160a01b0382165f908152600c6020526040902060020154600160a01b900460ff1615610c6a5760405162461bcd60e51b815260206004820152601a60248201527f5573657220697320616c726561647920726567697374657265640000000000006044820152606401610b56565b5f815111610cae5760405162461bcd60e51b8152602060048201526011602482015270155cd95c9b985b59481c995c5d5a5c9959607a1b6044820152606401610b56565b60408051610120810182528281526001600160a01b038416602080830191909152338284015260016060830152825180820184525f80825260808401919091528351808301855281815260a08401528351808301855281815260c08401528351818152918201909352909160e083019190610d39565b6060815260200190600190039081610d245790505b50815260408051602081810183525f808352938101919091526001600160a01b0386168352600c9052902081518190610d7290826138a1565b5060208201516001820180546001600160a01b0319166001600160a01b0392831617905560408301516002830180546060860151929093166001600160a81b031990931692909217600160a01b9115159190910217905560808201516003820190610ddd90826138a1565b5060a08201516004820190610df290826138a1565b5060c08201516005820190610e0790826138a1565b5060e08201518051610e23916006840191602090910190613034565b506101008201516007820190610e3990826138a1565b5050335f908152600d6020908152604080832080546001600160a01b0319166001600160a01b038816179055600e9091529020600a90555060055415610e9657600554600254610e96916001600160a01b03909116903390612e69565b816001600160a01b03167f48cac28ad4dc618e15f4c2dd5e97751182f166de97b25618318b2112aa951a2f82604051610ecf9190613168565b60405180910390a25050565b610ee3612ec8565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b610f0d612ef5565b600c5f610f18612e3e565b6001600160a01b0316815260208101919091526040015f2060020154600160a01b900460ff16610f5a5760405162461bcd60e51b8152600401610b5690613812565b5f610f63612e3e565b6001600160a01b0381165f90815260196020526040902054909150801580610f975750610f9362093a8082613975565b4210155b610fe35760405162461bcd60e51b815260206004820152601f60248201527f436c61696d20636f6f6c646f776e3a206f6e63652070657220372064617973006044820152606401610b56565b6001600160a01b0382165f908152601a60209081526040808320546015909252822054611010919061398e565b6001600160a01b0384165f908152601b602090815260408083205460179092528220549293509091611042919061398e565b6001600160a01b0385165f908152601c602090815260408083205460189092528220549293509091611074919061398e565b90505f816110828486613975565b61108c9190613975565b116110d95760405162461bcd60e51b815260206004820152601860248201527f4e6f206e657720616374697669747920746f20636c61696d00000000000000006044820152606401610b56565b5f600954826110e891906139a1565b6008546110f590856139a1565b60075461110290876139a1565b61110c9190613975565b6111169190613975565b9050600a548111156111275750600a545b6001600160a01b038087165f9081526019602090815260408083204290556015825280832054601a8352818420556017825280832054601b8352818420556018825280832054601c9092529091205560025461118591168783612e69565b6040805185815260208101859052908101839052606081018290526001600160a01b038716907f1d2069be7be2ef943cee32e593509bdd7843240e6e1f0866a0dc414dc430c8599060800160405180910390a25050505050506111e760015f55565b565b5f6111f2612e3e565b6001600160a01b0381165f908152600c6020526040902060020154909150600160a01b900460ff166112575760405162461bcd60e51b815260206004820152600e60248201526d139bdd081c9959da5cdd195c995960921b6044820152606401610b56565b6001600160a01b0381165f908152600c6020526040902060070161127b83826138a1565b50806001600160a01b03167f867b0e31a5337f1c17ca98872556d126fc038fdf10cb64eca13f94729562223283604051610ecf9190613168565b6013602052815f5260405f2081815481106112ce575f80fd5b905f5260205f20015f915091505080546112e7906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054611313906137da565b801561135e5780601f106113355761010080835404028352916020019161135e565b820191905f5260205f20905b81548152906001019060200180831161134157829003601f168201915b505050505081565b6001600160a01b0381165f908152600c60205260409020600701805460609190610924906137da565b600c5f61139a612e3e565b6001600160a01b0316815260208101919091526040015f2060020154600160a01b900460ff166113dc5760405162461bcd60e51b8152600401610b5690613812565b5f6113e5612e3e565b335f908152600e60205260409020549091501561142057335f908152600e60205260408120805491611416836139b8565b9190505550611447565b6003541561144757600354600254611447916001600160a01b039091169033903090612f1d565b5f83511161148d5760405162461bcd60e51b815260206004820152601360248201527218dbdb9d195b9d10d251081c995c5d5a5c9959606a1b6044820152606401610b56565b601d80546001810182555f919091526008027f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f810180546001600160a01b0384166001600160a01b0319909116178155907f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc14613500161150a85826138a1565b506002810161151984826138a1565b504260038201555f600682018190556001600160a01b0383168152601560205260408120805491611549836139cd565b9190505550816001600160a01b03167f4dc899ab633bbd3c97004820698910906a6748451e00b59a3e011358dc2f9fb585854260405161158b939291906139e5565b60405180910390a250505050565b600c5f6115a4612e3e565b6001600160a01b0316815260208101919091526040015f2060020154600160a01b900460ff166115e65760405162461bcd60e51b8152600401610b5690613812565b5f6115ef612e3e565b6001600160a01b0381165f908152600c6020526040902090915060050161161683826138a1565b50806001600160a01b03167f19897fbfe8e5b80854daf15e30ef30e31db3998f1e37c2f3cf84b590fba164a783604051610ecf9190613168565b5f6060805f805f80601d80549050881061167c5760405162461bcd60e51b8152600401610b5690613a1a565b5f601d898154811061169057611690613842565b905f5260205f2090600802019050805f015f9054906101000a90046001600160a01b0316816001018260020183600301548460040154856005015486600601548580546116dc906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054611708906137da565b80156117535780601f1061172a57610100808354040283529160200191611753565b820191905f5260205f20905b81548152906001019060200180831161173657829003601f168201915b50505050509550848054611766906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054611792906137da565b80156117dd5780601f106117b4576101008083540402835291602001916117dd565b820191905f5260205f20905b8154815290600101906020018083116117c057829003601f168201915b50505050509450975097509750975097509750975050919395979092949650565b611806612ec8565b600793909355600891909155600955600a55565b5f60605f601d8054905085106118425760405162461bcd60e51b8152600401610b5690613a1a565b5f8581526012602052604090205484106118975760405162461bcd60e51b815260206004820152601660248201527510dbdb5b595b9d08191bd95cc81b9bdd08195e1a5cdd60521b6044820152606401610b56565b5f858152601160209081526040808320878452825280832081516060810190925280546001600160a01b0316825260018101805492939192918401916118dc906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054611908906137da565b80156119535780601f1061192a57610100808354040283529160200191611953565b820191905f5260205f20905b81548152906001019060200180831161193657829003601f168201915b505050918352505060029190910154602091820152815190820151604090920151909891975095509350505050565b601160209081525f9283526040808420909152908252902080546001820180546001600160a01b0390921692916119b8906137da565b80601f01602080910402602001604051908101604052809291908181526020018280546119e4906137da565b8015611a2f5780601f10611a0657610100808354040283529160200191611a2f565b820191905f5260205f20905b815481529060010190602001808311611a1257829003601f168201915b5050505050908060020154905083565b611a9f604051806101200160405280606081526020015f6001600160a01b031681526020015f6001600160a01b031681526020015f1515815260200160608152602001606081526020016060815260200160608152602001606081525090565b6001600160a01b0382165f908152600c6020526040902060020154600160a01b900460ff16611b015760405162461bcd60e51b815260206004820152600e60248201526d155cd95c881b9bdd08199bdd5b9960921b6044820152606401610b56565b6001600160a01b0382165f908152600c60205260409081902081516101208101909252805482908290611b33906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054611b5f906137da565b8015611baa5780601f10611b8157610100808354040283529160200191611baa565b820191905f5260205f20905b815481529060010190602001808311611b8d57829003601f168201915b505050918352505060018201546001600160a01b03908116602083015260028301549081166040830152600160a01b900460ff1615156060820152600382018054608090920191611bfa906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054611c26906137da565b8015611c715780601f10611c4857610100808354040283529160200191611c71565b820191905f5260205f20905b815481529060010190602001808311611c5457829003601f168201915b50505050508152602001600482018054611c8a906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054611cb6906137da565b8015611d015780601f10611cd857610100808354040283529160200191611d01565b820191905f5260205f20905b815481529060010190602001808311611ce457829003601f168201915b50505050508152602001600582018054611d1a906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054611d46906137da565b8015611d915780601f10611d6857610100808354040283529160200191611d91565b820191905f5260205f20905b815481529060010190602001808311611d7457829003601f168201915b5050505050815260200160068201805480602002602001604051908101604052809291908181526020015f905b82821015611e66578382905f5260205f20018054611ddb906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054611e07906137da565b8015611e525780601f10611e2957610100808354040283529160200191611e52565b820191905f5260205f20905b815481529060010190602001808311611e3557829003601f168201915b505050505081526020019060010190611dbe565b505050508152602001600782018054611e7e906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054611eaa906137da565b8015611ef55780601f10611ecc57610100808354040283529160200191611ef5565b820191905f5260205f20905b815481529060010190602001808311611ed857829003601f168201915b5050505050815250509050919050565b600c5f611f10612e3e565b6001600160a01b0316815260208101919091526040015f2060020154600160a01b900460ff16611f525760405162461bcd60e51b8152600401610b5690613812565b335f908152600d602052604090205485516001600160a01b0390911690611fbb5760405162461bcd60e51b815260206004820152601860248201527f557365726e616d652063616e6e6f7420626520656d70747900000000000000006044820152606401610b56565b6001600160a01b0381165f908152600c6020526040902080611fdd88826138a1565b5060038101611fec87826138a1565b5060048101611ffb86826138a1565b506005810161200a85826138a1565b5082516120209060068301906020860190613034565b50816001600160a01b03167f3e22697b8c73d3349d4c96c42842b506a4f025921d2a1006eab4e8b3edde50a98760405161205a9190613168565b60405180910390a2816001600160a01b03167f3f838a7d0889a59b2445af5389196b3948170278848eb90d8d256ab14aaf4cf08660405161209b9190613168565b60405180910390a2816001600160a01b03167f19897fbfe8e5b80854daf15e30ef30e31db3998f1e37c2f3cf84b590fba164a7856040516120dc9190613168565b60405180910390a250505050505050565b6120f5612ec8565b6111e75f612f5c565b600c5f612109612e3e565b6001600160a01b0316815260208101919091526040015f2060020154600160a01b900460ff1661214b5760405162461bcd60e51b8152600401610b5690613812565b612153612ef5565b601d5481106121745760405162461bcd60e51b8152600401610b5690613a1a565b5f61217d612e3e565b90505f601d838154811061219357612193613842565b5f91825260208083206001600160a01b03861684526007600890930201918201905260409091205490915060ff16156121fe5760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481b1a5ad959609a1b6044820152606401610b56565b6001600160a01b0382165f9081526007820160205260408120805460ff1916600117905560048201805491612232836139cd565b90915550506001600160a01b0382165f90815260166020526040812080549161225a836139cd565b90915550506002546001600160a01b031615612294578054600254612294916001600160a01b039182169116670de0b6b3a7640000612e69565b60405183906001600160a01b038416907f62500381f39eb6f48b6e6f104021ceeaca9e5354918dc17b4a15bf87c5f5d28b905f90a350506122d460015f55565b50565b6001600160a01b0381165f908152601360209081526040808320805482518185028101850190935280835260609492939192909184015b828210156123b6578382905f5260205f2001805461232b906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054612357906137da565b80156123a25780601f10612379576101008083540402835291602001916123a2565b820191905f5260205f20905b81548152906001019060200180831161238557829003601f168201915b50505050508152602001906001019061230e565b505050509050919050565b6123c9612ec8565b6111e76123de6001546001600160a01b031690565b6002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015612424573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124489190613a47565b6002546001600160a01b03169190612e69565b600c6020525f9081526040902080548190612475906137da565b80601f01602080910402602001604051908101604052809291908181526020018280546124a1906137da565b80156124ec5780601f106124c3576101008083540402835291602001916124ec565b820191905f5260205f20905b8154815290600101906020018083116124cf57829003601f168201915b505050506001830154600284015460038501805494956001600160a01b03938416959383169450600160a01b90920460ff1692612528906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054612554906137da565b801561259f5780601f106125765761010080835404028352916020019161259f565b820191905f5260205f20905b81548152906001019060200180831161258257829003601f168201915b5050505050908060040180546125b4906137da565b80601f01602080910402602001604051908101604052809291908181526020018280546125e0906137da565b801561262b5780601f106126025761010080835404028352916020019161262b565b820191905f5260205f20905b81548152906001019060200180831161260e57829003601f168201915b505050505090806005018054612640906137da565b80601f016020809104026020016040519081016040528092919081815260200182805461266c906137da565b80156126b75780601f1061268e576101008083540402835291602001916126b7565b820191905f5260205f20905b81548152906001019060200180831161269a57829003601f168201915b5050505050908060070180546126cc906137da565b80601f01602080910402602001604051908101604052809291908181526020018280546126f8906137da565b80156127435780601f1061271a57610100808354040283529160200191612743565b820191905f5260205f20905b81548152906001019060200180831161272657829003601f168201915b5050505050905088565b600b818154811061275c575f80fd5b905f5260205f20015f9150905080546112e7906137da565b600c5f61277f612e3e565b6001600160a01b0316815260208101919091526040015f2060020154600160a01b900460ff166127c15760405162461bcd60e51b8152600401610b5690613812565b6127c9612ef5565b601d5482106127ea5760405162461bcd60e51b8152600401610b5690613a1a565b5f81511161283a5760405162461bcd60e51b815260206004820152601760248201527f436f6d6d656e742063616e6e6f7420626520656d7074790000000000000000006044820152606401610b56565b5f612843612e3e565b6004549091501561286d5760045460025461286d916001600160a01b039091169033903090612f1d565b5f8381526012602090815260408083205481516060810183526001600160a01b03868116825281850188815242838601528987526011865284872084885290955292909420845181546001600160a01b0319169316929092178255915191929160018201906128dc90826138a1565b506040918201516002909101555f8581526012602052908120805491612901836139cd565b9190505550601d848154811061291957612919613842565b5f91825260208220600560089092020101805491612936836139cd565b90915550506001600160a01b0382165f90815260176020526040812080549161295e836139cd565b919050555083826001600160a01b03167fdb68d60a2d5659f0528e369fe9a8cfdbec13beb23609aa9a7a5c2a2d973117e4854260405161299f929190613a5e565b60405180910390a350506129b260015f55565b5050565b60146020525f9081526040902080546112e7906137da565b6129d6612ec8565b600391909155600455565b5f6129ea612e3e565b6001600160a01b0381165f908152600c6020526040902060020154909150600160a01b900460ff16612a4f5760405162461bcd60e51b815260206004820152600e60248201526d139bdd081c9959da5cdd195c995960921b6044820152606401610b56565b6001600160a01b0381165f908152601460205260409020612a7083826138a1565b50806001600160a01b03167f7719fc2030b1349c1dd489c4a9a2e9143f20a2b936903549b256761f25a37b1a83604051610ecf9190613168565b612ab2612ec8565b6001600160a01b038116612adb57604051631e4fbdf760e01b81525f6004820152602401610b56565b6122d481612f5c565b600c5f612aef612e3e565b6001600160a01b0316815260208101919091526040015f2060020154600160a01b900460ff16612b315760405162461bcd60e51b8152600401610b5690613812565b601d548110612b825760405162461bcd60e51b815260206004820152601c60248201527f4f726967696e616c20706f737420646f6573206e6f74206578697374000000006044820152606401610b56565b5f612b8b612e3e565b90505f601d8381548110612ba157612ba1613842565b5f91825260208220601d805460018082018355919094527f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f600894850290810180546001600160a01b0319166001600160a01b03891617815593909402909101935090917f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc14613500190612c3490840182613a7f565b50600281810190612c4790840182613a7f565b50426003820155600681018490556001600160a01b0383165f908152601860205260408120805491612c78836139cd565b9190505550826001600160a01b03167f1c03620db49e9abd75c892c4d5777b171bbcba631506a2fd6078694a4455808c856001601d80549050612cbb919061398e565b6040805192835260208301919091520161158b565b600c5f612cdb612e3e565b6001600160a01b0316815260208101919091526040015f2060020154600160a01b900460ff16612d1d5760405162461bcd60e51b8152600401610b5690613812565b5f612d26612e3e565b6001600160a01b0381165f908152600c60205260409020909150600301612d4d83826138a1565b50806001600160a01b03167f3e22697b8c73d3349d4c96c42842b506a4f025921d2a1006eab4e8b3edde50a983604051610ecf9190613168565b600c5f612d92612e3e565b6001600160a01b0316815260208101919091526040015f2060020154600160a01b900460ff16612dd45760405162461bcd60e51b8152600401610b5690613812565b5f612ddd612e3e565b6001600160a01b0381165f908152600c60205260409020909150600401612e0483826138a1565b50806001600160a01b03167f3f838a7d0889a59b2445af5389196b3948170278848eb90d8d256ab14aaf4cf083604051610ecf9190613168565b335f908152600d60205260408120546001600160a01b031680612e615733612e63565b805b91505090565b6040516001600160a01b03838116602483015260448201839052610bf391859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050612fad565b6001546001600160a01b031633146111e75760405163118cdaa760e01b8152336004820152602401610b56565b60025f5403612f1757604051633ee5aeb560e01b815260040160405180910390fd5b60025f55565b6040516001600160a01b038481166024830152838116604483015260648201839052612f569186918216906323b872dd90608401612e96565b50505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f8060205f8451602086015f885af180612fcc576040513d5f823e3d81fd5b50505f513d91508115612fe3578060011415612ff0565b6001600160a01b0384163b155b15612f5657604051635274afe760e01b81526001600160a01b0385166004820152602401610b56565b5080545f8255905f5260205f20908101906122d49190613088565b828054828255905f5260205f20908101928215613078579160200282015b82811115613078578251829061306890826138a1565b5091602001919060010190613052565b50613084929150613088565b5090565b80821115613084575f61309b82826130a4565b50600101613088565b5080546130b0906137da565b5f825580601f106130bf575050565b601f0160209004905f5260205f20908101906122d491905b80821115613084575f81556001016130d7565b80356001600160a01b0381168114613100575f80fd5b919050565b5f60208284031215613115575f80fd5b61311e826130ea565b9392505050565b5f81518084525f5b818110156131495760208185018101518683018201520161312d565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f61311e6020830184613125565b5f6020828403121561318a575f80fd5b5035919050565b6001600160a01b038816815260e0602082018190525f906131b490830189613125565b82810360408401526131c68189613125565b9150508560608301528460808301528360a08301528260c083015298975050505050505050565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561322a5761322a6131ed565b604052919050565b5f82601f830112613241575f80fd5b813567ffffffffffffffff81111561325b5761325b6131ed565b61326e601f8201601f1916602001613201565b818152846020838601011115613282575f80fd5b816020850160208301375f918101602001919091529392505050565b5f82601f8301126132ad575f80fd5b8135602067ffffffffffffffff808311156132ca576132ca6131ed565b8260051b6132d9838201613201565b93845285810183019383810190888611156132f2575f80fd5b84880192505b8583101561332c5782358481111561330e575f80fd5b61331c8a87838c0101613232565b83525091840191908401906132f8565b98975050505050505050565b5f60208284031215613348575f80fd5b813567ffffffffffffffff81111561335e575f80fd5b61336a8482850161329e565b949350505050565b5f8060408385031215613383575f80fd5b61338c836130ea565b9150602083013567ffffffffffffffff8111156133a7575f80fd5b6133b385828601613232565b9150509250929050565b5f602082840312156133cd575f80fd5b813567ffffffffffffffff8111156133e3575f80fd5b61336a84828501613232565b5f8060408385031215613400575f80fd5b613409836130ea565b946020939093013593505050565b5f8060408385031215613428575f80fd5b823567ffffffffffffffff8082111561343f575f80fd5b61344b86838701613232565b93506020850135915080821115613460575f80fd5b506133b385828601613232565b5f805f8060808587031215613480575f80fd5b5050823594602084013594506040840135936060013592509050565b5f80604083850312156134ad575f80fd5b50508035926020909101359150565b6001600160a01b03841681526060602082018190525f906134df90830185613125565b9050826040830152949350505050565b5f8282518085526020808601955060208260051b840101602086015f5b8481101561353a57601f19868403018952613528838351613125565b9884019892509083019060010161350c565b5090979650505050505050565b602081525f8251610120806020850152613565610140850183613125565b9150602085015161358160408601826001600160a01b03169052565b5060408501516001600160a01b03811660608601525060608501518015156080860152506080850151601f19808685030160a08701526135c18483613125565b935060a08701519150808685030160c08701526135de8483613125565b935060c08701519150808685030160e08701526135fb8483613125565b935060e0870151915061010081878603018188015261361a85846134ef565b9088015187820390920184880152935090506136368382613125565b9695505050505050565b5f805f805f60a08688031215613654575f80fd5b853567ffffffffffffffff8082111561366b575f80fd5b61367789838a01613232565b9650602088013591508082111561368c575f80fd5b61369889838a01613232565b955060408801359150808211156136ad575f80fd5b6136b989838a01613232565b945060608801359150808211156136ce575f80fd5b6136da89838a01613232565b935060808801359150808211156136ef575f80fd5b506136fc8882890161329e565b9150509295509295909350565b602081525f61311e60208301846134ef565b5f61010080835261372e8184018c613125565b6001600160a01b038b811660208601528a1660408501528815156060850152838103608085015290506137618188613125565b905082810360a08401526137758187613125565b905082810360c08401526137898186613125565b905082810360e084015261379d8185613125565b9b9a5050505050505050505050565b5f80604083850312156137bd575f80fd5b82359150602083013567ffffffffffffffff8111156133a7575f80fd5b600181811c908216806137ee57607f821691505b60208210810361380c57634e487b7160e01b5f52602260045260245ffd5b50919050565b602080825260169082015275155cd95c881a5cc81b9bdd081c9959da5cdd195c995960521b604082015260600190565b634e487b7160e01b5f52603260045260245ffd5b601f821115610bf357805f5260205f20601f840160051c8101602085101561387b5750805b601f840160051c820191505b8181101561389a575f8155600101613887565b5050505050565b815167ffffffffffffffff8111156138bb576138bb6131ed565b6138cf816138c984546137da565b84613856565b602080601f831160018114613902575f84156138eb5750858301515b5f19600386901b1c1916600185901b178555613959565b5f85815260208120601f198616915b8281101561393057888601518255948401946001909101908401613911565b508582101561394d57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561398857613988613961565b92915050565b8181038181111561398857613988613961565b808202811582820484141761398857613988613961565b5f816139c6576139c6613961565b505f190190565b5f600182016139de576139de613961565b5060010190565b606081525f6139f76060830186613125565b8281036020840152613a098186613125565b915050826040830152949350505050565b602080825260139082015272141bdcdd08191bd95cc81b9bdd08195e1a5cdd606a1b604082015260600190565b5f60208284031215613a57575f80fd5b5051919050565b604081525f613a706040830185613125565b90508260208301529392505050565b818103613a8a575050565b613a9482546137da565b67ffffffffffffffff811115613aac57613aac6131ed565b613aba816138c984546137da565b5f601f821160018114613aeb575f8315613ad45750848201545b5f19600385901b1c1916600184901b17845561389a565b5f8581526020808220868352908220601f198616925b83811015613b215782860154825560019586019590910190602001613b01565b5085831015613b3e57818501545f19600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220938ca27e279b36195b032769dfe807575b6e9f4f9198388d8924bdbcd65ae82164736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b5060043610610388575f3560e01c806367cb52d8116101df578063b83bebe411610109578063df7969ad116100a9578063f5d7632011610079578063f5d76320146108bc578063f70d205c146108cf578063fa325cef146108e2578063fb7e06d8146108eb575f80fd5b8063df7969ad1461086f578063e58863441461088e578063f2fde38b146108a1578063f5c43e38146108b4575f80fd5b8063ce7842f5116100e4578063ce7842f514610815578063d82d72bf1461081e578063db5899071461083d578063db74559b14610850575f80fd5b8063b83bebe4146107c4578063c8bee1df146107d7578063cba3f1e6146107f6575f80fd5b8063836248821161017f578063a87430ba1161014f578063a87430ba1461076e578063aa097f1514610795578063aa7e5683146107a8578063acb31585146107bb575f80fd5b806383624882146107255780638d8f2adb1461072d5780638da5cb5b14610735578063a2720f3514610746575f80fd5b806370cc4bb7116101ba57806370cc4bb7146106d7578063715018a6146106ea578063725009d3146106f25780637d8494bc14610705575f80fd5b806367cb52d8146106a557806369c212f6146106ae5780636aa72383146106ce575f80fd5b806337c909ec116102c0578063488927531161026057806356a062271161023057806356a06227146106355780635c7995b41461065457806360cd13ea146106675780636454f77514610686575f80fd5b806348892753146105575780634a3b68cc146105795780634e43603a146105b95780635193c94c14610622575f80fd5b806340731c241161029b57806340731c241461050957806340943d3d1461051c578063446a2ec81461053b57806347607a6914610544575f80fd5b806337c909ec146104d9578063392338f5146104e357806339bc4eb8146104f6575f80fd5b806326a40c991161032b5780632c7a0a72116103065780632c7a0a72146104975780632df5867a146104aa5780632e4a28ca146104b35780632e5a6370146104c6575f80fd5b806326a40c991461045d57806326a4e8d21461047c5780632b7d172d1461048f575f80fd5b80630c86a5cb116103665780630c86a5cb146103ee5780630ea126f91461040357806323c4f9631461041657806324161e761461043e575f80fd5b806304f7f9131461038c57806308e421cd146103a85780630b1e7f83146103c8575b5f80fd5b61039560075481565b6040519081526020015b60405180910390f35b6103bb6103b6366004613105565b6108fe565b60405161039f9190613168565b6103db6103d636600461317a565b6109a7565b60405161039f9796959493929190613191565b6104016103fc366004613338565b610b09565b005b610401610411366004613372565b610bf8565b610395610424366004613105565b6001600160a01b03165f908152600e602052604090205490565b61039561044c366004613105565b601a6020525f908152604090205481565b61039561046b366004613105565b60196020525f908152604090205481565b61040161048a366004613105565b610edb565b610401610f05565b6104016104a53660046133bd565b6111e9565b610395600a5481565b6103bb6104c13660046133ef565b6112b5565b6103bb6104d4366004613105565b611366565b61039562093a8081565b6104016104f1366004613417565b61138f565b6104016105043660046133bd565b611599565b6103db61051736600461317a565b611650565b61039561052a366004613105565b60166020525f908152604090205481565b61039560095481565b61040161055236600461346d565b6117fe565b61056a61056536600461349c565b61181a565b60405161039f939291906134bc565b6105a1610587366004613105565b600f6020525f90815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161039f565b6106026105c7366004613105565b6001600160a01b03165f9081526015602090815260408083205460168352818420546017845282852054601890945291909320549293909290565b60408051948552602085019390935291830152606082015260800161039f565b61056a61063036600461349c565b611982565b610395610643366004613105565b601b6020525f908152604090205481565b6002546105a1906001600160a01b031681565b610395610675366004613105565b60156020525f908152604090205481565b610395610694366004613105565b60186020525f908152604090205481565b61039560055481565b6106c16106bc366004613105565b611a3f565b60405161039f9190613547565b61039560045481565b6104016106e5366004613640565b611f05565b6104016120ed565b61040161070036600461317a565b6120fe565b610718610713366004613105565b6122d7565b60405161039f9190613709565b601d54610395565b6104016123c1565b6001546001600160a01b03166105a1565b6105a1610754366004613105565b600d6020525f90815260409020546001600160a01b031681565b61078161077c366004613105565b61245b565b60405161039f98979695949392919061371b565b6103bb6107a336600461317a565b61274d565b6104016107b63660046137ac565b612774565b61039560035481565b6103bb6107d2366004613105565b6129b6565b6103956107e5366004613105565b60176020525f908152604090205481565b610395610804366004613105565b601c6020525f908152604090205481565b61039560065481565b61039561082c36600461317a565b60126020525f908152604090205481565b61040161084b36600461349c565b6129ce565b61039561085e366004613105565b60106020525f908152604090205481565b61039561087d366004613105565b600e6020525f908152604090205481565b61040161089c3660046133bd565b6129e1565b6104016108af366004613105565b612aaa565b610395600a81565b6104016108ca36600461317a565b612ae4565b6104016108dd3660046133bd565b612cd0565b61039560085481565b6104016108f93660046133bd565b612d87565b6001600160a01b0381165f908152601460205260409020805460609190610924906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054610950906137da565b801561099b5780601f106109725761010080835404028352916020019161099b565b820191905f5260205f20905b81548152906001019060200180831161097e57829003601f168201915b50505050509050919050565b601d81815481106109b6575f80fd5b5f918252602090912060089091020180546001820180546001600160a01b039092169350906109e4906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054610a10906137da565b8015610a5b5780601f10610a3257610100808354040283529160200191610a5b565b820191905f5260205f20905b815481529060010190602001808311610a3e57829003601f168201915b505050505090806002018054610a70906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9c906137da565b8015610ae75780601f10610abe57610100808354040283529160200191610ae7565b820191905f5260205f20905b815481529060010190602001808311610aca57829003601f168201915b5050505050908060030154908060040154908060050154908060060154905087565b600c5f610b14612e3e565b6001600160a01b0316815260208101919091526040015f2060020154600160a01b900460ff16610b5f5760405162461bcd60e51b8152600401610b5690613812565b60405180910390fd5b5f610b68612e3e565b6001600160a01b0381165f908152601360205260408120919250610b8c9190613019565b5f5b8251811015610bf3576001600160a01b0382165f9081526013602052604090208351849083908110610bc257610bc2613842565b60209081029190910181015182546001810184555f938452919092200190610bea90826138a1565b50600101610b8e565b505050565b6001600160a01b0382165f908152600c6020526040902060020154600160a01b900460ff1615610c6a5760405162461bcd60e51b815260206004820152601a60248201527f5573657220697320616c726561647920726567697374657265640000000000006044820152606401610b56565b5f815111610cae5760405162461bcd60e51b8152602060048201526011602482015270155cd95c9b985b59481c995c5d5a5c9959607a1b6044820152606401610b56565b60408051610120810182528281526001600160a01b038416602080830191909152338284015260016060830152825180820184525f80825260808401919091528351808301855281815260a08401528351808301855281815260c08401528351818152918201909352909160e083019190610d39565b6060815260200190600190039081610d245790505b50815260408051602081810183525f808352938101919091526001600160a01b0386168352600c9052902081518190610d7290826138a1565b5060208201516001820180546001600160a01b0319166001600160a01b0392831617905560408301516002830180546060860151929093166001600160a81b031990931692909217600160a01b9115159190910217905560808201516003820190610ddd90826138a1565b5060a08201516004820190610df290826138a1565b5060c08201516005820190610e0790826138a1565b5060e08201518051610e23916006840191602090910190613034565b506101008201516007820190610e3990826138a1565b5050335f908152600d6020908152604080832080546001600160a01b0319166001600160a01b038816179055600e9091529020600a90555060055415610e9657600554600254610e96916001600160a01b03909116903390612e69565b816001600160a01b03167f48cac28ad4dc618e15f4c2dd5e97751182f166de97b25618318b2112aa951a2f82604051610ecf9190613168565b60405180910390a25050565b610ee3612ec8565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b610f0d612ef5565b600c5f610f18612e3e565b6001600160a01b0316815260208101919091526040015f2060020154600160a01b900460ff16610f5a5760405162461bcd60e51b8152600401610b5690613812565b5f610f63612e3e565b6001600160a01b0381165f90815260196020526040902054909150801580610f975750610f9362093a8082613975565b4210155b610fe35760405162461bcd60e51b815260206004820152601f60248201527f436c61696d20636f6f6c646f776e3a206f6e63652070657220372064617973006044820152606401610b56565b6001600160a01b0382165f908152601a60209081526040808320546015909252822054611010919061398e565b6001600160a01b0384165f908152601b602090815260408083205460179092528220549293509091611042919061398e565b6001600160a01b0385165f908152601c602090815260408083205460189092528220549293509091611074919061398e565b90505f816110828486613975565b61108c9190613975565b116110d95760405162461bcd60e51b815260206004820152601860248201527f4e6f206e657720616374697669747920746f20636c61696d00000000000000006044820152606401610b56565b5f600954826110e891906139a1565b6008546110f590856139a1565b60075461110290876139a1565b61110c9190613975565b6111169190613975565b9050600a548111156111275750600a545b6001600160a01b038087165f9081526019602090815260408083204290556015825280832054601a8352818420556017825280832054601b8352818420556018825280832054601c9092529091205560025461118591168783612e69565b6040805185815260208101859052908101839052606081018290526001600160a01b038716907f1d2069be7be2ef943cee32e593509bdd7843240e6e1f0866a0dc414dc430c8599060800160405180910390a25050505050506111e760015f55565b565b5f6111f2612e3e565b6001600160a01b0381165f908152600c6020526040902060020154909150600160a01b900460ff166112575760405162461bcd60e51b815260206004820152600e60248201526d139bdd081c9959da5cdd195c995960921b6044820152606401610b56565b6001600160a01b0381165f908152600c6020526040902060070161127b83826138a1565b50806001600160a01b03167f867b0e31a5337f1c17ca98872556d126fc038fdf10cb64eca13f94729562223283604051610ecf9190613168565b6013602052815f5260405f2081815481106112ce575f80fd5b905f5260205f20015f915091505080546112e7906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054611313906137da565b801561135e5780601f106113355761010080835404028352916020019161135e565b820191905f5260205f20905b81548152906001019060200180831161134157829003601f168201915b505050505081565b6001600160a01b0381165f908152600c60205260409020600701805460609190610924906137da565b600c5f61139a612e3e565b6001600160a01b0316815260208101919091526040015f2060020154600160a01b900460ff166113dc5760405162461bcd60e51b8152600401610b5690613812565b5f6113e5612e3e565b335f908152600e60205260409020549091501561142057335f908152600e60205260408120805491611416836139b8565b9190505550611447565b6003541561144757600354600254611447916001600160a01b039091169033903090612f1d565b5f83511161148d5760405162461bcd60e51b815260206004820152601360248201527218dbdb9d195b9d10d251081c995c5d5a5c9959606a1b6044820152606401610b56565b601d80546001810182555f919091526008027f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f810180546001600160a01b0384166001600160a01b0319909116178155907f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc14613500161150a85826138a1565b506002810161151984826138a1565b504260038201555f600682018190556001600160a01b0383168152601560205260408120805491611549836139cd565b9190505550816001600160a01b03167f4dc899ab633bbd3c97004820698910906a6748451e00b59a3e011358dc2f9fb585854260405161158b939291906139e5565b60405180910390a250505050565b600c5f6115a4612e3e565b6001600160a01b0316815260208101919091526040015f2060020154600160a01b900460ff166115e65760405162461bcd60e51b8152600401610b5690613812565b5f6115ef612e3e565b6001600160a01b0381165f908152600c6020526040902090915060050161161683826138a1565b50806001600160a01b03167f19897fbfe8e5b80854daf15e30ef30e31db3998f1e37c2f3cf84b590fba164a783604051610ecf9190613168565b5f6060805f805f80601d80549050881061167c5760405162461bcd60e51b8152600401610b5690613a1a565b5f601d898154811061169057611690613842565b905f5260205f2090600802019050805f015f9054906101000a90046001600160a01b0316816001018260020183600301548460040154856005015486600601548580546116dc906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054611708906137da565b80156117535780601f1061172a57610100808354040283529160200191611753565b820191905f5260205f20905b81548152906001019060200180831161173657829003601f168201915b50505050509550848054611766906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054611792906137da565b80156117dd5780601f106117b4576101008083540402835291602001916117dd565b820191905f5260205f20905b8154815290600101906020018083116117c057829003601f168201915b50505050509450975097509750975097509750975050919395979092949650565b611806612ec8565b600793909355600891909155600955600a55565b5f60605f601d8054905085106118425760405162461bcd60e51b8152600401610b5690613a1a565b5f8581526012602052604090205484106118975760405162461bcd60e51b815260206004820152601660248201527510dbdb5b595b9d08191bd95cc81b9bdd08195e1a5cdd60521b6044820152606401610b56565b5f858152601160209081526040808320878452825280832081516060810190925280546001600160a01b0316825260018101805492939192918401916118dc906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054611908906137da565b80156119535780601f1061192a57610100808354040283529160200191611953565b820191905f5260205f20905b81548152906001019060200180831161193657829003601f168201915b505050918352505060029190910154602091820152815190820151604090920151909891975095509350505050565b601160209081525f9283526040808420909152908252902080546001820180546001600160a01b0390921692916119b8906137da565b80601f01602080910402602001604051908101604052809291908181526020018280546119e4906137da565b8015611a2f5780601f10611a0657610100808354040283529160200191611a2f565b820191905f5260205f20905b815481529060010190602001808311611a1257829003601f168201915b5050505050908060020154905083565b611a9f604051806101200160405280606081526020015f6001600160a01b031681526020015f6001600160a01b031681526020015f1515815260200160608152602001606081526020016060815260200160608152602001606081525090565b6001600160a01b0382165f908152600c6020526040902060020154600160a01b900460ff16611b015760405162461bcd60e51b815260206004820152600e60248201526d155cd95c881b9bdd08199bdd5b9960921b6044820152606401610b56565b6001600160a01b0382165f908152600c60205260409081902081516101208101909252805482908290611b33906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054611b5f906137da565b8015611baa5780601f10611b8157610100808354040283529160200191611baa565b820191905f5260205f20905b815481529060010190602001808311611b8d57829003601f168201915b505050918352505060018201546001600160a01b03908116602083015260028301549081166040830152600160a01b900460ff1615156060820152600382018054608090920191611bfa906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054611c26906137da565b8015611c715780601f10611c4857610100808354040283529160200191611c71565b820191905f5260205f20905b815481529060010190602001808311611c5457829003601f168201915b50505050508152602001600482018054611c8a906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054611cb6906137da565b8015611d015780601f10611cd857610100808354040283529160200191611d01565b820191905f5260205f20905b815481529060010190602001808311611ce457829003601f168201915b50505050508152602001600582018054611d1a906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054611d46906137da565b8015611d915780601f10611d6857610100808354040283529160200191611d91565b820191905f5260205f20905b815481529060010190602001808311611d7457829003601f168201915b5050505050815260200160068201805480602002602001604051908101604052809291908181526020015f905b82821015611e66578382905f5260205f20018054611ddb906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054611e07906137da565b8015611e525780601f10611e2957610100808354040283529160200191611e52565b820191905f5260205f20905b815481529060010190602001808311611e3557829003601f168201915b505050505081526020019060010190611dbe565b505050508152602001600782018054611e7e906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054611eaa906137da565b8015611ef55780601f10611ecc57610100808354040283529160200191611ef5565b820191905f5260205f20905b815481529060010190602001808311611ed857829003601f168201915b5050505050815250509050919050565b600c5f611f10612e3e565b6001600160a01b0316815260208101919091526040015f2060020154600160a01b900460ff16611f525760405162461bcd60e51b8152600401610b5690613812565b335f908152600d602052604090205485516001600160a01b0390911690611fbb5760405162461bcd60e51b815260206004820152601860248201527f557365726e616d652063616e6e6f7420626520656d70747900000000000000006044820152606401610b56565b6001600160a01b0381165f908152600c6020526040902080611fdd88826138a1565b5060038101611fec87826138a1565b5060048101611ffb86826138a1565b506005810161200a85826138a1565b5082516120209060068301906020860190613034565b50816001600160a01b03167f3e22697b8c73d3349d4c96c42842b506a4f025921d2a1006eab4e8b3edde50a98760405161205a9190613168565b60405180910390a2816001600160a01b03167f3f838a7d0889a59b2445af5389196b3948170278848eb90d8d256ab14aaf4cf08660405161209b9190613168565b60405180910390a2816001600160a01b03167f19897fbfe8e5b80854daf15e30ef30e31db3998f1e37c2f3cf84b590fba164a7856040516120dc9190613168565b60405180910390a250505050505050565b6120f5612ec8565b6111e75f612f5c565b600c5f612109612e3e565b6001600160a01b0316815260208101919091526040015f2060020154600160a01b900460ff1661214b5760405162461bcd60e51b8152600401610b5690613812565b612153612ef5565b601d5481106121745760405162461bcd60e51b8152600401610b5690613a1a565b5f61217d612e3e565b90505f601d838154811061219357612193613842565b5f91825260208083206001600160a01b03861684526007600890930201918201905260409091205490915060ff16156121fe5760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481b1a5ad959609a1b6044820152606401610b56565b6001600160a01b0382165f9081526007820160205260408120805460ff1916600117905560048201805491612232836139cd565b90915550506001600160a01b0382165f90815260166020526040812080549161225a836139cd565b90915550506002546001600160a01b031615612294578054600254612294916001600160a01b039182169116670de0b6b3a7640000612e69565b60405183906001600160a01b038416907f62500381f39eb6f48b6e6f104021ceeaca9e5354918dc17b4a15bf87c5f5d28b905f90a350506122d460015f55565b50565b6001600160a01b0381165f908152601360209081526040808320805482518185028101850190935280835260609492939192909184015b828210156123b6578382905f5260205f2001805461232b906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054612357906137da565b80156123a25780601f10612379576101008083540402835291602001916123a2565b820191905f5260205f20905b81548152906001019060200180831161238557829003601f168201915b50505050508152602001906001019061230e565b505050509050919050565b6123c9612ec8565b6111e76123de6001546001600160a01b031690565b6002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015612424573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124489190613a47565b6002546001600160a01b03169190612e69565b600c6020525f9081526040902080548190612475906137da565b80601f01602080910402602001604051908101604052809291908181526020018280546124a1906137da565b80156124ec5780601f106124c3576101008083540402835291602001916124ec565b820191905f5260205f20905b8154815290600101906020018083116124cf57829003601f168201915b505050506001830154600284015460038501805494956001600160a01b03938416959383169450600160a01b90920460ff1692612528906137da565b80601f0160208091040260200160405190810160405280929190818152602001828054612554906137da565b801561259f5780601f106125765761010080835404028352916020019161259f565b820191905f5260205f20905b81548152906001019060200180831161258257829003601f168201915b5050505050908060040180546125b4906137da565b80601f01602080910402602001604051908101604052809291908181526020018280546125e0906137da565b801561262b5780601f106126025761010080835404028352916020019161262b565b820191905f5260205f20905b81548152906001019060200180831161260e57829003601f168201915b505050505090806005018054612640906137da565b80601f016020809104026020016040519081016040528092919081815260200182805461266c906137da565b80156126b75780601f1061268e576101008083540402835291602001916126b7565b820191905f5260205f20905b81548152906001019060200180831161269a57829003601f168201915b5050505050908060070180546126cc906137da565b80601f01602080910402602001604051908101604052809291908181526020018280546126f8906137da565b80156127435780601f1061271a57610100808354040283529160200191612743565b820191905f5260205f20905b81548152906001019060200180831161272657829003601f168201915b5050505050905088565b600b818154811061275c575f80fd5b905f5260205f20015f9150905080546112e7906137da565b600c5f61277f612e3e565b6001600160a01b0316815260208101919091526040015f2060020154600160a01b900460ff166127c15760405162461bcd60e51b8152600401610b5690613812565b6127c9612ef5565b601d5482106127ea5760405162461bcd60e51b8152600401610b5690613a1a565b5f81511161283a5760405162461bcd60e51b815260206004820152601760248201527f436f6d6d656e742063616e6e6f7420626520656d7074790000000000000000006044820152606401610b56565b5f612843612e3e565b6004549091501561286d5760045460025461286d916001600160a01b039091169033903090612f1d565b5f8381526012602090815260408083205481516060810183526001600160a01b03868116825281850188815242838601528987526011865284872084885290955292909420845181546001600160a01b0319169316929092178255915191929160018201906128dc90826138a1565b506040918201516002909101555f8581526012602052908120805491612901836139cd565b9190505550601d848154811061291957612919613842565b5f91825260208220600560089092020101805491612936836139cd565b90915550506001600160a01b0382165f90815260176020526040812080549161295e836139cd565b919050555083826001600160a01b03167fdb68d60a2d5659f0528e369fe9a8cfdbec13beb23609aa9a7a5c2a2d973117e4854260405161299f929190613a5e565b60405180910390a350506129b260015f55565b5050565b60146020525f9081526040902080546112e7906137da565b6129d6612ec8565b600391909155600455565b5f6129ea612e3e565b6001600160a01b0381165f908152600c6020526040902060020154909150600160a01b900460ff16612a4f5760405162461bcd60e51b815260206004820152600e60248201526d139bdd081c9959da5cdd195c995960921b6044820152606401610b56565b6001600160a01b0381165f908152601460205260409020612a7083826138a1565b50806001600160a01b03167f7719fc2030b1349c1dd489c4a9a2e9143f20a2b936903549b256761f25a37b1a83604051610ecf9190613168565b612ab2612ec8565b6001600160a01b038116612adb57604051631e4fbdf760e01b81525f6004820152602401610b56565b6122d481612f5c565b600c5f612aef612e3e565b6001600160a01b0316815260208101919091526040015f2060020154600160a01b900460ff16612b315760405162461bcd60e51b8152600401610b5690613812565b601d548110612b825760405162461bcd60e51b815260206004820152601c60248201527f4f726967696e616c20706f737420646f6573206e6f74206578697374000000006044820152606401610b56565b5f612b8b612e3e565b90505f601d8381548110612ba157612ba1613842565b5f91825260208220601d805460018082018355919094527f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f600894850290810180546001600160a01b0319166001600160a01b03891617815593909402909101935090917f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc14613500190612c3490840182613a7f565b50600281810190612c4790840182613a7f565b50426003820155600681018490556001600160a01b0383165f908152601860205260408120805491612c78836139cd565b9190505550826001600160a01b03167f1c03620db49e9abd75c892c4d5777b171bbcba631506a2fd6078694a4455808c856001601d80549050612cbb919061398e565b6040805192835260208301919091520161158b565b600c5f612cdb612e3e565b6001600160a01b0316815260208101919091526040015f2060020154600160a01b900460ff16612d1d5760405162461bcd60e51b8152600401610b5690613812565b5f612d26612e3e565b6001600160a01b0381165f908152600c60205260409020909150600301612d4d83826138a1565b50806001600160a01b03167f3e22697b8c73d3349d4c96c42842b506a4f025921d2a1006eab4e8b3edde50a983604051610ecf9190613168565b600c5f612d92612e3e565b6001600160a01b0316815260208101919091526040015f2060020154600160a01b900460ff16612dd45760405162461bcd60e51b8152600401610b5690613812565b5f612ddd612e3e565b6001600160a01b0381165f908152600c60205260409020909150600401612e0483826138a1565b50806001600160a01b03167f3f838a7d0889a59b2445af5389196b3948170278848eb90d8d256ab14aaf4cf083604051610ecf9190613168565b335f908152600d60205260408120546001600160a01b031680612e615733612e63565b805b91505090565b6040516001600160a01b03838116602483015260448201839052610bf391859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050612fad565b6001546001600160a01b031633146111e75760405163118cdaa760e01b8152336004820152602401610b56565b60025f5403612f1757604051633ee5aeb560e01b815260040160405180910390fd5b60025f55565b6040516001600160a01b038481166024830152838116604483015260648201839052612f569186918216906323b872dd90608401612e96565b50505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f8060205f8451602086015f885af180612fcc576040513d5f823e3d81fd5b50505f513d91508115612fe3578060011415612ff0565b6001600160a01b0384163b155b15612f5657604051635274afe760e01b81526001600160a01b0385166004820152602401610b56565b5080545f8255905f5260205f20908101906122d49190613088565b828054828255905f5260205f20908101928215613078579160200282015b82811115613078578251829061306890826138a1565b5091602001919060010190613052565b50613084929150613088565b5090565b80821115613084575f61309b82826130a4565b50600101613088565b5080546130b0906137da565b5f825580601f106130bf575050565b601f0160209004905f5260205f20908101906122d491905b80821115613084575f81556001016130d7565b80356001600160a01b0381168114613100575f80fd5b919050565b5f60208284031215613115575f80fd5b61311e826130ea565b9392505050565b5f81518084525f5b818110156131495760208185018101518683018201520161312d565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f61311e6020830184613125565b5f6020828403121561318a575f80fd5b5035919050565b6001600160a01b038816815260e0602082018190525f906131b490830189613125565b82810360408401526131c68189613125565b9150508560608301528460808301528360a08301528260c083015298975050505050505050565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561322a5761322a6131ed565b604052919050565b5f82601f830112613241575f80fd5b813567ffffffffffffffff81111561325b5761325b6131ed565b61326e601f8201601f1916602001613201565b818152846020838601011115613282575f80fd5b816020850160208301375f918101602001919091529392505050565b5f82601f8301126132ad575f80fd5b8135602067ffffffffffffffff808311156132ca576132ca6131ed565b8260051b6132d9838201613201565b93845285810183019383810190888611156132f2575f80fd5b84880192505b8583101561332c5782358481111561330e575f80fd5b61331c8a87838c0101613232565b83525091840191908401906132f8565b98975050505050505050565b5f60208284031215613348575f80fd5b813567ffffffffffffffff81111561335e575f80fd5b61336a8482850161329e565b949350505050565b5f8060408385031215613383575f80fd5b61338c836130ea565b9150602083013567ffffffffffffffff8111156133a7575f80fd5b6133b385828601613232565b9150509250929050565b5f602082840312156133cd575f80fd5b813567ffffffffffffffff8111156133e3575f80fd5b61336a84828501613232565b5f8060408385031215613400575f80fd5b613409836130ea565b946020939093013593505050565b5f8060408385031215613428575f80fd5b823567ffffffffffffffff8082111561343f575f80fd5b61344b86838701613232565b93506020850135915080821115613460575f80fd5b506133b385828601613232565b5f805f8060808587031215613480575f80fd5b5050823594602084013594506040840135936060013592509050565b5f80604083850312156134ad575f80fd5b50508035926020909101359150565b6001600160a01b03841681526060602082018190525f906134df90830185613125565b9050826040830152949350505050565b5f8282518085526020808601955060208260051b840101602086015f5b8481101561353a57601f19868403018952613528838351613125565b9884019892509083019060010161350c565b5090979650505050505050565b602081525f8251610120806020850152613565610140850183613125565b9150602085015161358160408601826001600160a01b03169052565b5060408501516001600160a01b03811660608601525060608501518015156080860152506080850151601f19808685030160a08701526135c18483613125565b935060a08701519150808685030160c08701526135de8483613125565b935060c08701519150808685030160e08701526135fb8483613125565b935060e0870151915061010081878603018188015261361a85846134ef565b9088015187820390920184880152935090506136368382613125565b9695505050505050565b5f805f805f60a08688031215613654575f80fd5b853567ffffffffffffffff8082111561366b575f80fd5b61367789838a01613232565b9650602088013591508082111561368c575f80fd5b61369889838a01613232565b955060408801359150808211156136ad575f80fd5b6136b989838a01613232565b945060608801359150808211156136ce575f80fd5b6136da89838a01613232565b935060808801359150808211156136ef575f80fd5b506136fc8882890161329e565b9150509295509295909350565b602081525f61311e60208301846134ef565b5f61010080835261372e8184018c613125565b6001600160a01b038b811660208601528a1660408501528815156060850152838103608085015290506137618188613125565b905082810360a08401526137758187613125565b905082810360c08401526137898186613125565b905082810360e084015261379d8185613125565b9b9a5050505050505050505050565b5f80604083850312156137bd575f80fd5b82359150602083013567ffffffffffffffff8111156133a7575f80fd5b600181811c908216806137ee57607f821691505b60208210810361380c57634e487b7160e01b5f52602260045260245ffd5b50919050565b602080825260169082015275155cd95c881a5cc81b9bdd081c9959da5cdd195c995960521b604082015260600190565b634e487b7160e01b5f52603260045260245ffd5b601f821115610bf357805f5260205f20601f840160051c8101602085101561387b5750805b601f840160051c820191505b8181101561389a575f8155600101613887565b5050505050565b815167ffffffffffffffff8111156138bb576138bb6131ed565b6138cf816138c984546137da565b84613856565b602080601f831160018114613902575f84156138eb5750858301515b5f19600386901b1c1916600185901b178555613959565b5f85815260208120601f198616915b8281101561393057888601518255948401946001909101908401613911565b508582101561394d57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561398857613988613961565b92915050565b8181038181111561398857613988613961565b808202811582820484141761398857613988613961565b5f816139c6576139c6613961565b505f190190565b5f600182016139de576139de613961565b5060010190565b606081525f6139f76060830186613125565b8281036020840152613a098186613125565b915050826040830152949350505050565b602080825260139082015272141bdcdd08191bd95cc81b9bdd08195e1a5cdd606a1b604082015260600190565b5f60208284031215613a57575f80fd5b5051919050565b604081525f613a706040830185613125565b90508260208301529392505050565b818103613a8a575050565b613a9482546137da565b67ffffffffffffffff811115613aac57613aac6131ed565b613aba816138c984546137da565b5f601f821160018114613aeb575f8315613ad45750848201545b5f19600385901b1c1916600184901b17845561389a565b5f8581526020808220868352908220601f198616925b83811015613b215782860154825560019586019590910190602001613b01565b5085831015613b3e57818501545f19600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220938ca27e279b36195b032769dfe807575b6e9f4f9198388d8924bdbcd65ae82164736f6c63430008180033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimWeeklyEngagementRewards()": {
        "notice": "Claim weekly engagement rewards based on newly accumulated activity since last claim.         Rewards are computed on deltas: posts, comments, shares.         One claim per 7 days; payout is capped by maxWeeklyPayout."
      },
      "getUserFeed(address)": {
        "notice": "View user’s feed pointer (CID)"
      },
      "getUserModel(address)": {
        "notice": "View user’s model/embedding CID"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1498,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1610,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "ccToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)967"
      },
      {
        "astId": 1663,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "postCost",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1670,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "commentCost",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1677,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "signupBonus",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1684,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "referralBonus",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1691,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "rewardPerPost",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1698,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "rewardPerComment",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1705,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "rewardPerShare",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1712,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "maxWeeklyPayout",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1718,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "interests",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 1723,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "users",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_struct(User)1630_storage)"
      },
      {
        "astId": 1727,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "walletToCreator",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1731,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "freePostsRemaining",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1735,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "referrers",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1739,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "referralCount",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1746,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "postComments",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Comment)1656_storage))"
      },
      {
        "astId": 1750,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "postCommentsCount",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1755,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "userInterests",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 1759,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "userFeedModels",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 1763,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "userPostCount",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1767,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "userLikeCount",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1771,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "userCommentCount",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1775,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "userShareCount",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1779,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "lastClaimedAt",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1783,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "lastClaimedPostCount",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1787,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "lastClaimedCommentCount",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1791,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "lastClaimedShareCount",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1795,
        "contract": "contracts/ChainchatAI.sol:ChainchatAI",
        "label": "posts",
        "offset": 0,
        "slot": "29",
        "type": "t_array(t_struct(Post)1649_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Post)1649_storage)dyn_storage": {
        "base": "t_struct(Post)1649_storage",
        "encoding": "dynamic_array",
        "label": "struct ChainchatAI.Post[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)967": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_struct(User)1630_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ChainchatAI.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)1630_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Comment)1656_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct ChainchatAI.Comment))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Comment)1656_storage)"
      },
      "t_mapping(t_uint256,t_struct(Comment)1656_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ChainchatAI.Comment)",
        "numberOfBytes": "32",
        "value": "t_struct(Comment)1656_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Comment)1656_storage": {
        "encoding": "inplace",
        "label": "struct ChainchatAI.Comment",
        "members": [
          {
            "astId": 1651,
            "contract": "contracts/ChainchatAI.sol:ChainchatAI",
            "label": "commenter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1653,
            "contract": "contracts/ChainchatAI.sol:ChainchatAI",
            "label": "content",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1655,
            "contract": "contracts/ChainchatAI.sol:ChainchatAI",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Post)1649_storage": {
        "encoding": "inplace",
        "label": "struct ChainchatAI.Post",
        "members": [
          {
            "astId": 1632,
            "contract": "contracts/ChainchatAI.sol:ChainchatAI",
            "label": "author",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1634,
            "contract": "contracts/ChainchatAI.sol:ChainchatAI",
            "label": "contentCID",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1636,
            "contract": "contracts/ChainchatAI.sol:ChainchatAI",
            "label": "imageCID",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1638,
            "contract": "contracts/ChainchatAI.sol:ChainchatAI",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1640,
            "contract": "contracts/ChainchatAI.sol:ChainchatAI",
            "label": "likes",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1642,
            "contract": "contracts/ChainchatAI.sol:ChainchatAI",
            "label": "commentsCount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1644,
            "contract": "contracts/ChainchatAI.sol:ChainchatAI",
            "label": "originalPostId",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1648,
            "contract": "contracts/ChainchatAI.sol:ChainchatAI",
            "label": "likedBy",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(User)1630_storage": {
        "encoding": "inplace",
        "label": "struct ChainchatAI.User",
        "members": [
          {
            "astId": 1612,
            "contract": "contracts/ChainchatAI.sol:ChainchatAI",
            "label": "username",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1614,
            "contract": "contracts/ChainchatAI.sol:ChainchatAI",
            "label": "userAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1616,
            "contract": "contracts/ChainchatAI.sol:ChainchatAI",
            "label": "sender",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1618,
            "contract": "contracts/ChainchatAI.sol:ChainchatAI",
            "label": "isRegistered",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 1620,
            "contract": "contracts/ChainchatAI.sol:ChainchatAI",
            "label": "profileImage",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1622,
            "contract": "contracts/ChainchatAI.sol:ChainchatAI",
            "label": "bio",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1624,
            "contract": "contracts/ChainchatAI.sol:ChainchatAI",
            "label": "coverPhoto",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 1627,
            "contract": "contracts/ChainchatAI.sol:ChainchatAI",
            "label": "interests",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 1629,
            "contract": "contracts/ChainchatAI.sol:ChainchatAI",
            "label": "feedPointer",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}